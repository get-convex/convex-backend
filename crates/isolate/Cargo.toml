[package]
name = "isolate"
version = "0.1.0"
authors = ["Convex, Inc. <no-reply@convex.dev>"]
edition = "2021"
license = "LicenseRef-FSL-1.1-Apache-2.0"

build = "build.rs"
include = ["data"]

[lib]
doctest = false

[package.metadata.cargo-udeps.ignore]
normal = ["mysql"]
development = ["mysql"]

[dependencies]
anyhow = { workspace = true }
async-broadcast = { workspace = true }
async-channel = { workspace = true }
async-recursion = { workspace = true }
async-trait = { workspace = true }
axum = { workspace = true }
base64 = { workspace = true }
bytes = { workspace = true }
cmd_util = { path = "../cmd_util" }
common = { path = "../common" }
const-oid = { workspace = true }
convex_macro = { path = "../convex_macro" }
database = { path = "../database" }
deno_core = { workspace = true }
deno_core_icudata = { workspace = true }
derive_more = { workspace = true }
elliptic-curve = { workspace = true }
encoding_rs = { workspace = true }
errors = { path = "../errors" }
fastrace = { workspace = true }
file_storage = { path = "../file_storage" }
futures = { workspace = true }
headers = { workspace = true }
http = { workspace = true }
http-body-util = { workspace = true }
humansize = { workspace = true }
itertools = { workspace = true }
keybroker = { path = "../keybroker" }
maplit = { workspace = true, optional = true }
metrics = { path = "../metrics" }
mime = { workspace = true }
model = { path = "../model" }
multer = { workspace = true }
must-let = { workspace = true, optional = true }
p256 = { workspace = true }
p384 = { workspace = true }
parking_lot = { workspace = true }
pb = { path = "../pb" }
phf = { workspace = true }
prometheus = { workspace = true }
proptest = { workspace = true, optional = true }
proptest-derive = { workspace = true, optional = true }
proptest-http = { workspace = true, optional = true }
rand = { workspace = true }
rand_chacha = { workspace = true }
regex = { workspace = true }
ring = { workspace = true }
rsa = { workspace = true }
runtime = { path = "../runtime" }
search = { path = "../search" }
semver = { workspace = true }
sentry = { workspace = true }
serde = { workspace = true }
serde_bytes = { workspace = true }
serde_json = { workspace = true }
sha1 = { workspace = true }
sha2 = { workspace = true }
sourcemap = { workspace = true }
spki = { workspace = true }
storage = { path = "../storage" }
sync_types = { package = "convex_sync_types", path = "../convex/sync_types" }
thiserror = { workspace = true }
tokio = { workspace = true }
tokio-stream = { workspace = true }
tracing = { workspace = true }
udf = { path = "../udf" }
url = { workspace = true }
usage_tracking = { path = "../usage_tracking" }
uuid = { workspace = true }
value = { path = "../value" }
vector = { path = "../vector" }

[build-dependencies]
anyhow = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
value = { path = "../value" }
walkdir = { workspace = true }

[dev-dependencies]
async-broadcast = { workspace = true }
async-channel = { workspace = true }
common = { path = "../common", features = ["testing"] }
database = { path = "../database", features = ["testing"] }
errors = { path = "../errors", features = ["testing"] }
hyper = { workspace = true }
keybroker = { path = "../keybroker", features = ["testing"] }
maplit = { workspace = true }
metrics = { path = "../metrics", features = ["testing"] }
model = { path = "../model", features = ["testing"] }
must-let = { workspace = true }
pretty_assertions = { workspace = true }
proptest = { workspace = true }
proptest-derive = { workspace = true }
proptest-http = { workspace = true }
runtime = { path = "../runtime", features = ["testing"] }
search = { path = "../search", features = ["testing"] }
shape_inference = { path = "../shape_inference", features = ["testing"] }
storage = { path = "../storage", features = ["testing"] }
udf = { path = "../udf", features = ["testing"] }
usage_tracking = { path = "../usage_tracking", features = ["testing"] }
value = { path = "../value", features = ["testing"] }
vector = { path = "../vector", features = ["testing"] }

[features]
testing = [
    "common/testing",
    "database/testing",
    "errors/testing",
    "keybroker/testing",
    "maplit",
    "metrics/testing",
    "model/testing",
    "must-let",
    "proptest",
    "proptest-derive",
    "proptest-http",
    "runtime/testing",
    "search/testing",
    "storage/testing",
    "usage_tracking/testing",
    "value/testing",
    "vector/testing",
    "udf/testing",
]
tracy-tracing = ["common/tracy-tracing"]

[package.metadata.cargo-machete]
ignored = [
    # Generated code depends on phf
    "phf",
]

[lints]
workspace = true
