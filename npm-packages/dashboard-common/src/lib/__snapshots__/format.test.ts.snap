// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`displaySchemaFromShapes array shape 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table1: defineTable({ field1: v.array(v.boolean()) }),
});"
`;

exports[`displaySchemaFromShapes complicated shape 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table1: defineTable({
    field1: v.object({
      field1: v.object({
        field1: v.array(v.union(v.boolean(), v.string())),
      }),
      field2: v.array(
        v.union(v.array(v.string()), v.string())
      ),
    }),
  }),
});"
`;

exports[`displaySchemaFromShapes displaySchema 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table: defineTable({
    ref: v.id("reference"),
    nullField: v.null(),
    numberField: v.float64(),
    bigintField: v.int64(),
    booleanField: v.boolean(),
    stringField: v.string(),
    bytesField: v.bytes(),
    arrayField: v.array(v.boolean()),
    anyField: v.any(),
    literalBigint: v.literal(1n),
    literalNumber: v.literal(0),
    literalString: v.literal("hello world"),
    literalBoolean: v.literal(true),
    union: v.union(v.string(), v.float64()),
    object: v.object({ a: v.optional(v.any()) }),
  })
    .index("by_a", ["a"])
    .index("by_a_b", ["a", "b"])
    .searchIndex("no_filter_fields", {
      searchField: "property1",
    })
    .searchIndex("one_filter_field", {
      searchField: "property1",
      filterFields: ["property1"],
    })
    .searchIndex("two_filter_fields", {
      searchField: "property1",
      filterFields: ["property1", "property2"],
    })
    .vectorIndex("vector_no_filter_fields", {
      vectorField: "property1",
      dimensions: 1536,
    })
    .vectorIndex("vector_one_filter_field", {
      vectorField: "property1",
      dimensions: 1536,
      filterFields: ["property1"],
    })
    .vectorIndex("vector_two_filter_fields", {
      vectorField: "property1",
      dimensions: 1536,
      filterFields: ["property1", "property2"],
    }),
  table_any: defineTable(v.any()),
  table_union: defineTable(
    v.union(
      v.object({ a: v.any(), z: v.optional(v.any()) }),
      v.object({ b: v.optional(v.any()) })
    )
  ),
});"
`;

exports[`displaySchemaFromShapes displaySchema with only search indexes 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table: defineTable(v.any()).searchIndex("search_index", {
    searchField: "property1",
  }),
  table_next: defineTable(v.any()),
});"
`;

exports[`displaySchemaFromShapes displaySchema with only vector indexes 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table: defineTable(v.any()).vectorIndex("vector_index", {
    vectorField: "property1",
    dimensions: 1536,
  }),
  table_next: defineTable(v.any()),
});"
`;

exports[`displaySchemaFromShapes displaySchema without vector indexes 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table: defineTable(v.any()),
});"
`;

exports[`displaySchemaFromShapes no schema on all tables 1`] = `undefined`;

exports[`displaySchemaFromShapes object shape 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table1: defineTable({
    field1: v.object({
      object: v.object({
        field1: v.boolean(),
        field1: v.string(),
      }),
    }),
  }),
});"
`;

exports[`displaySchemaFromShapes one boolean field 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table1: defineTable({ field1: v.boolean() }),
});"
`;

exports[`displaySchemaFromShapes primitives shapes 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table1: defineTable({
    field1: v.object({
      unknown: v.any(),
      never: v.any(),
      id: v.id("test"),
      null: v.null(),
      bigint: v.int64(),
      number: v.float64(),
      boolean: v.boolean(),
      string: v.string(),
      bytes: v.bytes(),
    }),
  }),
});"
`;

exports[`displaySchemaFromShapes record shape 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table1: defineTable({
    field1: v.record(v.string(), v.float64()),
  }),
});"
`;

exports[`displaySchemaFromShapes schema validation false 1`] = `undefined`;

exports[`displaySchemaFromShapes shape with nested system properties 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table1: defineTable({
    nested: v.object({
      _id: v.id("test"),
      _creationTime: v.float64(),
    }),
  }),
});"
`;

exports[`displaySchemaFromShapes shape with only system properties 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({ table1: defineTable({}) });"
`;

exports[`displaySchemaFromShapes shape with optional nested field 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table1: defineTable({
    object: v.object({
      optionalString: v.optional(v.string()),
    }),
  }),
});"
`;

exports[`displaySchemaFromShapes shape with optional top level field 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table1: defineTable({
    optionalString: v.optional(v.string()),
  }),
});"
`;

exports[`displaySchemaFromShapes shape with top level union 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table1: defineTable(
    v.union(
      v.object({ left: v.string() }),
      v.object({ right: v.string() })
    )
  ),
});"
`;

exports[`displaySchemaFromShapes two tables 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table1: defineTable({ field1: v.boolean() }),
  table2: defineTable({ field1: v.boolean() }),
});"
`;

exports[`displaySchemaFromShapes union shape 1`] = `
"import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  table1: defineTable({
    field1: v.union(v.boolean(), v.string(), v.bytes()),
  }),
});"
`;
