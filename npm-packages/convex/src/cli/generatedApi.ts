/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_teams_for_member"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_slug}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_cli_projects_for_team"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workos/available_workos_team_emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get candidate email addresses to be WorkOS admins. */
        get: operations["get_available_workos_team_emails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deployments/{deployment_name}/has_associated_workos_team": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check if a deployment has an associated WorkOS team */
        get: operations["get_has_associated_workos_team"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workos/get_or_provision_workos_environment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Get or provision a WorkOS environment for a deployment */
        post: operations["get_or_provision_workos_environment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workos/has_associated_workos_team": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Check if a deployment has an associated WorkOS team */
        post: operations["has_associated_workos_team"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workos/provision_associated_workos_team": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Provision a WorkOS team for a Convex team */
        post: operations["provision_associated_workos_team"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AvailableWorkOSTeamEmailsResponse: {
            availableEmails: string[];
            usedEmails: string[];
        };
        GetOrProvisionEnvironmentRequest: {
            deploymentName: string;
        };
        HasAssociatedWorkOSTeamRequest: {
            deploymentName: string;
        };
        HasAssociatedWorkOSTeamResponse: {
            /** @description Email of Convex team member who created the WorkOS account.
             *     This field should always be present when has_associated_workos_team is
             *     true. */
            adminConvexEmail?: string | null;
            /** @description Email address used to provision the WorkOS account. This field should
             *     always be present if has_associated_workos_team is true. */
            adminEmail?: string | null;
            /** @description Name of Convex team member who created the WorkOS account.
             *     This field is optional even when has_associated_workos_team is true. */
            adminName?: string | null;
            hasAssociatedWorkosTeam: boolean;
            teamId: components["schemas"]["TeamId"];
        };
        /** Format: int64 */
        MemberId: number;
        ProjectDetails: {
            /** Format: int64 */
            createTime: number;
            devDeploymentName?: string | null;
            id: components["schemas"]["ProjectId"];
            isDemo: boolean;
            name: components["schemas"]["ProjectName"];
            prodDeploymentName?: string | null;
            slug: components["schemas"]["ProjectSlug"];
            teamId: components["schemas"]["TeamId"];
        };
        /** Format: int64 */
        ProjectId: number;
        ProjectName: string;
        ProjectSlug: string;
        ProvisionEnvironmentResponse: {
            apiKey: string;
            clientId: string;
            environmentId: string;
            environmentName: string;
            newlyProvisioned: boolean;
        };
        ProvisionWorkOSTeamRequest: {
            /** @description Email address to use for the WorkOS team admin,
             *     must be a verified email address associated with the user's account */
            email: string;
            /** @description Convex team ID, no WorkOS team exists at this point */
            teamId: components["schemas"]["TeamId"];
        };
        ProvisionWorkOSTeamResponse: {
            adminEmail: string;
            workosTeamId: string;
            workosTeamName: string;
        };
        ReferralCode: string;
        Team: {
            creator?: null | components["schemas"]["MemberId"];
            id: components["schemas"]["TeamId"];
            managedBy?: string | null;
            name: components["schemas"]["TeamName"];
            referralCode: components["schemas"]["ReferralCode"];
            referredBy?: null | components["schemas"]["TeamId"];
            slug: components["schemas"]["TeamSlug"];
            suspended: boolean;
        };
        /** Format: int64 */
        TeamId: number;
        TeamName: string;
        TeamSlug: string;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type AvailableWorkOsTeamEmailsResponse = components['schemas']['AvailableWorkOSTeamEmailsResponse'];
export type GetOrProvisionEnvironmentRequest = components['schemas']['GetOrProvisionEnvironmentRequest'];
export type HasAssociatedWorkOsTeamRequest = components['schemas']['HasAssociatedWorkOSTeamRequest'];
export type HasAssociatedWorkOsTeamResponse = components['schemas']['HasAssociatedWorkOSTeamResponse'];
export type MemberId = components['schemas']['MemberId'];
export type ProjectDetails = components['schemas']['ProjectDetails'];
export type ProjectId = components['schemas']['ProjectId'];
export type ProjectName = components['schemas']['ProjectName'];
export type ProjectSlug = components['schemas']['ProjectSlug'];
export type ProvisionEnvironmentResponse = components['schemas']['ProvisionEnvironmentResponse'];
export type ProvisionWorkOsTeamRequest = components['schemas']['ProvisionWorkOSTeamRequest'];
export type ProvisionWorkOsTeamResponse = components['schemas']['ProvisionWorkOSTeamResponse'];
export type ReferralCode = components['schemas']['ReferralCode'];
export type Team = components['schemas']['Team'];
export type TeamId = components['schemas']['TeamId'];
export type TeamName = components['schemas']['TeamName'];
export type TeamSlug = components['schemas']['TeamSlug'];
export type $defs = Record<string, never>;
export interface operations {
    get_teams_for_member: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"][];
                };
            };
        };
    };
    get_cli_projects_for_team: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team slug identifier */
                team_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectDetails"][];
                };
            };
        };
    };
    get_available_workos_team_emails: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailableWorkOSTeamEmailsResponse"];
                };
            };
        };
    };
    get_has_associated_workos_team: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Deployment name */
                deployment_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HasAssociatedWorkOSTeamResponse"];
                };
            };
        };
    };
    get_or_provision_workos_environment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetOrProvisionEnvironmentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProvisionEnvironmentResponse"];
                };
            };
        };
    };
    has_associated_workos_team: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HasAssociatedWorkOSTeamRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HasAssociatedWorkOSTeamResponse"];
                };
            };
        };
    };
    provision_associated_workos_team: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProvisionWorkOSTeamRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProvisionWorkOSTeamResponse"];
                };
            };
        };
    };
}
