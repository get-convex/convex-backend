/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/cloud_backups/{cloud_backup_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_cloud_backup"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud_backups/{cloud_backup_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["cancel_cloud_backup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cloud_backups/{cloud_backup_id}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["delete_cloud_backup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/create_project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["create_project_and_provision_deployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delete_account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["delete_account"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delete_project/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["dashboard_delete_project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deployments/{deployment_id}/configure_periodic_backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["configure_periodic_backup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deployments/{deployment_id}/disable_periodic_backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["disable_periodic_backup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deployments/{deployment_id}/get_periodic_backup_config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_periodic_backup_config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deployments/{deployment_id}/request_cloud_backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["request_cloud_backup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deployments/{deployment_id}/restore_from_cloud_backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["restore_from_cloud_backup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discord/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_discord_accounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discord/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["authorize_discord_account"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discord/login_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_discord_login_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discord/unlink": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["unlink_discord_account"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instances/{deployment_name}/access_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_deployment_access_tokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instances/{deployment_name}/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["get_deployment_auth_dashboard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instances/{deployment_name}/domains/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["create_vanity_domain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instances/{deployment_name}/domains/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["delete_vanity_domain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instances/{deployment_name}/domains/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_vanity_domains_for_instance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invites/{code}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["accept_invitation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member_data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_member_data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/optins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["dashboard_get_opt_ins"];
        put: operations["dashboard_accept_opt_ins"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile_emails/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["create_profile_email"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile_emails/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["delete_profile_email"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile_emails/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_profile_emails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile_emails/resend_verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["resend_verification_email"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile_emails/update_primary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["update_primary_profile_email"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile_emails/verify/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["verify_profile_email"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_project"];
        put: operations["update_project"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/access_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_project_access_tokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_deployments_for_project"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/provision": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["provision_deployment_dashboard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["transfer_project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rename_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["rename_access_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_teams_for_member"];
        put?: never;
        post: operations["create_team"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/delete_access_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["delete_team_access_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["update_team"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/access_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_team_access_tokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/cancel_orb_subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["cancel_orb_subscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/create_setup_intent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["create_setup_intent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/create_subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["create_subscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["delete_team"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/deployments/{deployment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_deployment_by_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/get_audit_log_events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_audit_log_events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/get_discounted_plan/{plan_id}/{promo_code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_discounted_plan"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/get_entitlements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_team_entitlements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/get_orb_subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_orb_subscription"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/get_project_roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_project_roles_for_team"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["pending_invitations_for_team"];
        put?: never;
        post: operations["create_invitation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/invites/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["cancel_invitation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/list_active_plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_active_plans"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/list_cloud_backups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_cloud_backups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/list_invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_invoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_members_for_team"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_projects_for_team"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/remove_member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["remove_member_from_team"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/unpause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["unpause_deployments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/unschedule_cancel_orb_subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["unschedule_cancel_orb_subscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/update_billing_address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["update_billing_address"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/update_billing_contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["update_billing_contact"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/update_member_role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["update_member_role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/update_payment_method": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["update_payment_method"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/update_project_roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["update_project_roles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/usage/team_usage_state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_team_usage_state"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/update_profile_name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["update_profile_name"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ActionOnAccessTokenArgs: {
            accessToken: string;
        };
        Address: {
            city?: string | null;
            country?: string | null;
            line1?: string | null;
            line2?: string | null;
            postal_code?: string | null;
            state?: string | null;
        };
        /** @description Encrypted admin key */
        AdminKey: string;
        /** @enum {string} */
        AuditLogAction: "joinTeam" | "createTeam" | "updateTeam" | "deleteTeam" | "createProject" | "transferProject" | "receiveProject" | "updateProject" | "deleteProject" | "createProjectEnvironmentVariable" | "updateProjectEnvironmentVariable" | "deleteProjectEnvironmentVariable" | "createDeployment" | "deleteDeployment" | "inviteMember" | "cancelMemberInvitation" | "removeMember" | "updateMemberRole" | "updateMemberProjectRole" | "updatePaymentMethod" | "updateBillingContact" | "updateBillingAddress" | "createSubscription" | "resumeSubscription" | "cancelSubscription" | "createTeamAccessToken" | "updateTeamAccessToken" | "deleteTeamAccessToken" | "viewTeamAccessToken" | "createCustomDomain" | "deleteCustomDomain" | "startManualCloudBackup" | "restoreFromCloudBackup" | "configurePeriodicBackup" | "disablePeriodicBackup" | "deleteCloudBackup" | "disableTeamExceedingSpendingLimits" | "setSpendingLimit";
        /** @description Represents the `ValidatedActor` equivalent for audit logs. This identifies
         *     who executed an AuditLogEvent */
        AuditLogActor: "system" | {
            member: {
                member_id: components["schemas"]["MemberId"];
            };
        } | {
            serviceAccount: {
                member_id: components["schemas"]["MemberId"];
            };
        } | {
            team: {
                team_id: components["schemas"]["TeamId"];
            };
        };
        AuditLogEventResponse: {
            action: components["schemas"]["AuditLogAction"];
            actor: components["schemas"]["AuditLogActor"];
            /** Format: int64 */
            createTime: number;
            metadata: components["schemas"]["Value"];
            teamId: components["schemas"]["TeamId"];
        };
        /** @description Struct that contains the result of a query to the audit_logs table. The
         *     `events` field contains all of the `AuditLog` values and the `cursor` field
         *     denotes where to resume the query if more results are needed. */
        AuditLogResponse: {
            cursor?: string | null;
            events: components["schemas"]["AuditLogEventResponse"][];
        };
        AuthorizeDiscordAccountRequest: {
            authorizationCode: string;
            csrfToken: string;
        };
        BillingContactResponse: {
            email: string;
            name: string;
        };
        CancelInvitationArgs: {
            email: string;
        };
        /** Format: int64 */
        CloudBackupId: number;
        CloudBackupResponse: {
            /** Format: int64 */
            expirationTime: number;
            id: components["schemas"]["CloudBackupId"];
            /** Format: int64 */
            requestedTime: number;
            snapshotId?: string | null;
            sourceDeploymentId: components["schemas"]["DeploymentId"];
            sourceDeploymentName: components["schemas"]["InstanceName"];
            state: string;
        };
        ConfigurePeriodicBackupArgs: {
            cronspec: string;
        };
        CreateInvitationArgs: {
            email: string;
            role: components["schemas"]["Role"];
        };
        CreateProjectArgs: {
            deploymentType?: null | components["schemas"]["DeploymentType"];
            partitionId?: null | components["schemas"]["PartitionId"];
            projectName: components["schemas"]["ProjectName"];
            team: components["schemas"]["TeamSlug"];
        };
        CreateProjectResponse: {
            adminKey: components["schemas"]["AdminKey"];
            deploymentName: string;
            prodUrl: string;
            projectSlug: components["schemas"]["ProjectSlug"];
            /** Format: int64 */
            projectsRemaining: number;
            teamSlug: components["schemas"]["TeamSlug"];
        };
        CreateSubscriptionArgs: {
            billingAddress?: null | components["schemas"]["Address"];
            email: string;
            name: string;
            paymentMethod?: string | null;
            planId: string;
        };
        CreateTeamArgs: {
            name: components["schemas"]["ProposedTeamName"];
        };
        /** Format: int64 */
        DeploymentId: number;
        DeploymentResponse: {
            /** Format: int64 */
            createTime: number;
            creator: components["schemas"]["MemberId"];
            deploymentType: components["schemas"]["DeploymentType"];
            /** Format: int64 */
            id: number;
            /** @enum {string} */
            kind: "cloud";
            name: string;
            previewIdentifier?: null | components["schemas"]["PreviewDeploymentIdentifier"];
            projectId: components["schemas"]["ProjectId"];
        } | {
            /** Format: int64 */
            createTime: number;
            creator: components["schemas"]["MemberId"];
            deploymentType: components["schemas"]["DeploymentType"];
            deviceName: components["schemas"]["DeviceName"];
            /** Format: int64 */
            id: number;
            isActive: boolean;
            /** @enum {string} */
            kind: "local";
            /** Format: int64 */
            lastUpdateTime: number;
            name: string;
            /** Format: int32 */
            port: number;
            previewIdentifier?: null | components["schemas"]["PreviewDeploymentIdentifier"];
            projectId: components["schemas"]["ProjectId"];
        };
        /** @enum {string} */
        DeploymentType: "dev" | "prod" | "preview";
        DeviceName: string;
        DiscordAccount: {
            details?: null | components["schemas"]["DiscordAccountDetails"];
            id: string;
        };
        DiscordAccountDetails: {
            avatar?: string | null;
            discriminator: string;
            global_name?: string | null;
            username: string;
        };
        DiscordAccountsResponse: {
            accounts: components["schemas"]["DiscordAccount"][];
        };
        DiscordId: string;
        DiscordLoginUrlResponse: {
            url: string;
        };
        DiscountedPlanResponse: {
            /** Format: int64 */
            durationInMonths?: number | null;
            /** Format: double */
            percentOff: number;
            planId: string;
            requiresPaymentMethod: boolean;
        };
        GetOptInsResponse: {
            optInsToAccept: components["schemas"]["OptInToAccept"][];
        };
        InstanceAuthForDashboardInteractionsResponse: {
            adminKey: components["schemas"]["SerializedAccessToken"];
            instanceUrl: string;
            /** @enum {string} */
            kind: "Cloud";
        } | {
            adminKey: components["schemas"]["AdminKey"];
            instanceUrl: string;
            /** @enum {string} */
            kind: "Local";
        };
        /** @description Example instance names:
         *
         *     tall-sheep-123
         *
         *     test-tall-sheep-123  # Prefix of test for internal testing */
        InstanceName: string;
        InvitationResponse: {
            email: string;
            expired: boolean;
            role: components["schemas"]["Role"];
        };
        InvoiceResponse: {
            currency: string;
            hasFailedPayment: boolean;
            hostedInvoiceUrl?: string | null;
            id: string;
            /** Format: int64 */
            invoiceDate: number;
            invoiceNumber: string;
            status: string;
            total: string;
        };
        InvoicesResponse: {
            invoices: components["schemas"]["InvoiceResponse"][];
        };
        ListVanityDomainsResponse: {
            domains: components["schemas"]["VanityDomainResponse"][];
        };
        MemberDataResponse: {
            deployments: components["schemas"]["DeploymentResponse"][];
            optInsToAccept: components["schemas"]["OptInToAccept"][];
            projects: components["schemas"]["ProjectDetails"][];
            teams: components["schemas"]["Team"][];
        };
        /** Format: int64 */
        MemberEmailId: number;
        MemberEmailResponse: {
            /** Format: int64 */
            creationTime: number;
            email: string;
            id: components["schemas"]["MemberEmailId"];
            isPrimary: boolean;
            isVerified: boolean;
        };
        /** Format: int64 */
        MemberId: number;
        MemberResponse: {
            email: string;
            id: components["schemas"]["MemberId"];
            name?: string | null;
        };
        OptIn: {
            tos: string;
        };
        OptInToAccept: {
            message: string;
            optIn: components["schemas"]["OptIn"];
        };
        OrbSubscriptionResponse: {
            billingAddress?: null | components["schemas"]["Address"];
            billingContact: components["schemas"]["BillingContactResponse"];
            /** Format: int64 */
            endDate?: number | null;
            paymentMethod?: null | components["schemas"]["PaymentMethodResponse"];
            plan: components["schemas"]["PlanResponse"];
            status: string;
        };
        /** Format: int64 */
        PartitionId: number;
        PaymentMethodResponse: {
            display: string;
            kind: string;
        };
        PeriodicBackupConfig: {
            cronspec: string;
            /** Format: int64 */
            expirationDeltaSecs: number;
            /** Format: int64 */
            nextRun: number;
            sourceDeploymentId: components["schemas"]["DeploymentId"];
        };
        PlanResponse: {
            description: string;
            id: string;
            name: string;
            planType?: string | null;
            /** Format: double */
            seatPrice: number;
            status: string;
        };
        PlansResponse: {
            plans: components["schemas"]["PlanResponse"][];
        };
        PreviewDeploymentIdentifier: string;
        ProfileEmailArgs: {
            email: string;
        };
        ProjectDetails: {
            /** Format: int64 */
            createTime: number;
            id: components["schemas"]["ProjectId"];
            isDemo: boolean;
            name: components["schemas"]["ProjectName"];
            slug: components["schemas"]["ProjectSlug"];
            teamId: components["schemas"]["TeamId"];
        };
        /** Format: int64 */
        ProjectId: number;
        ProjectMemberRoleResponse: {
            /** Format: int64 */
            lastUpdated: number;
            memberId: components["schemas"]["MemberId"];
            projectId: components["schemas"]["ProjectId"];
            role: components["schemas"]["ProjectRole"];
            teamId: components["schemas"]["TeamId"];
        };
        ProjectName: string;
        /** @enum {string} */
        ProjectRole: "admin";
        ProjectRoleUpdateArg: {
            memberId: components["schemas"]["MemberId"];
            projectId: components["schemas"]["ProjectId"];
            role?: null | components["schemas"]["ProjectRole"];
        };
        ProjectSlug: string;
        ProposedTeamName: string;
        ProvisionDeploymentDashboardArgs: {
            deploymentType: components["schemas"]["DeploymentType"];
        };
        ProvisionDeploymentDashboardResponse: {
            deploymentName: string;
        };
        RemoveMemberArgs: {
            memberId: components["schemas"]["MemberId"];
        };
        RenameAccessTokenArgs: {
            /** @description Authentication token is expected to be the access token from auth0 */
            accessToken: string;
            newName: components["schemas"]["DeviceName"];
        };
        /** @enum {string} */
        RequestDestination: "convexCloud" | "convexSite";
        RestoreFromCloudBackupArgs: {
            id: components["schemas"]["CloudBackupId"];
        };
        /** @enum {string} */
        Role: "admin" | "developer";
        /** @description ConvexAccessToken is our own internal notion of authorization.
         *     It is versioned.
         *
         *     V1 - uses an auth0_access_token for authorization.
         *
         *     Serialization is done by SerializedAccessToken::new
         *     The ConvexAccessToken is serialized (json) and base64
         *     encoded for obfuscation before sending it to the client
         *
         *     Deserialization is done by SerializedAccessToken::decode
         *     This reverses the process and returns a ConvexAccessToken which
         *     can be match'd by the extractor.
         *
         *     `SerializedAccessToken` is intentionally the only struct that is
         *     left public.
         *
         *     The json is externally tagged. Expect it to look like
         *     {"v1": "auth0token"} */
        SerializedAccessToken: string;
        SetupIntentResponse: {
            clientSecret: string;
        };
        Team: {
            creator: components["schemas"]["MemberId"];
            id: components["schemas"]["TeamId"];
            name: components["schemas"]["TeamName"];
            slug: components["schemas"]["TeamSlug"];
            suspended: boolean;
        };
        TeamAccessTokenResponse: {
            accessToken: string;
            /** Format: int64 */
            creationTime: number;
            creator: components["schemas"]["MemberId"];
            /** Format: int64 */
            lastUsedTime?: number | null;
            name: components["schemas"]["DeviceName"];
            permissions?: string[] | null;
            serializedAccessToken: components["schemas"]["SerializedAccessToken"];
        };
        TeamEntitlementsResponse: {
            auditLogsEnabled: boolean;
            customDomainsEnabled: boolean;
            logStreamingEnabled: boolean;
            /** Format: int64 */
            maxCloudBackups: number;
            /** Format: int64 */
            maxProjects: number;
            /** Format: int64 */
            maxTeamMembers: number;
            periodicBackupsEnabled: boolean;
            /** Format: int64 */
            projectMaxPreviewDeployments: number;
            streamingExportEnabled: boolean;
            /** Format: int64 */
            teamMaxActionCompute: number;
            /** Format: int64 */
            teamMaxDatabaseBandwidth: number;
            /** Format: int64 */
            teamMaxDatabaseStorage: number;
            /** Format: int64 */
            teamMaxFileBandwidth: number;
            /** Format: int64 */
            teamMaxFileStorage: number;
            /** Format: int64 */
            teamMaxFunctionCalls: number;
            /** Format: int64 */
            teamMaxVectorBandwidth: number;
            /** Format: int64 */
            teamMaxVectorStorage: number;
        };
        /** Format: int64 */
        TeamId: number;
        TeamMemberResponse: {
            email: string;
            id: components["schemas"]["MemberId"];
            name?: string | null;
            role: components["schemas"]["Role"];
        };
        TeamName: string;
        TeamSlug: string;
        TeamUsageStateResponse: {
            teamId: components["schemas"]["TeamId"];
            usageState: components["schemas"]["UsageState"];
        };
        TransferProjectArgs: {
            destinationTeamId: components["schemas"]["TeamId"];
        };
        UnlinkDiscordAccountRequest: {
            discordId: components["schemas"]["DiscordId"];
        };
        UpdateBillingAddressArgs: {
            billingAddress: components["schemas"]["Address"];
        };
        UpdateBillingContactArgs: {
            email: string;
            name: string;
        };
        UpdateMemberRoleArgs: {
            memberId: components["schemas"]["MemberId"];
            role: components["schemas"]["Role"];
        };
        UpdatePaymentMethodArgs: {
            paymentMethod: string;
        };
        UpdateProfileNameArgs: {
            name: string;
        };
        UpdateProjectArgs: {
            name?: null | components["schemas"]["ProjectName"];
            slug?: null | components["schemas"]["ProjectSlug"];
        };
        UpdateProjectRolesArgs: {
            updates: components["schemas"]["ProjectRoleUpdateArg"][];
        };
        UpdateTeamArgs: {
            name?: null | components["schemas"]["ProposedTeamName"];
            slug?: null | components["schemas"]["TeamSlug"];
        };
        /** @enum {string} */
        UsageState: "Default" | "Approaching" | "Exceeded" | "Paused" | "Disabled";
        Value: unknown;
        VanityDomainRequestArgs: {
            domain: string;
            requestDestination: components["schemas"]["RequestDestination"];
        };
        VanityDomainResponse: {
            /** Format: int64 */
            creationTime: number;
            /** @deprecated */
            creationTs: string;
            domain: string;
            instanceName: components["schemas"]["InstanceName"];
            requestDestination: components["schemas"]["RequestDestination"];
            /** Format: int64 */
            verificationTime?: number | null;
            /** @deprecated */
            verificationTs?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type ActionOnAccessTokenArgs = components['schemas']['ActionOnAccessTokenArgs'];
export type Address = components['schemas']['Address'];
export type AdminKey = components['schemas']['AdminKey'];
export type AuditLogAction = components['schemas']['AuditLogAction'];
export type AuditLogActor = components['schemas']['AuditLogActor'];
export type AuditLogEventResponse = components['schemas']['AuditLogEventResponse'];
export type AuditLogResponse = components['schemas']['AuditLogResponse'];
export type AuthorizeDiscordAccountRequest = components['schemas']['AuthorizeDiscordAccountRequest'];
export type BillingContactResponse = components['schemas']['BillingContactResponse'];
export type CancelInvitationArgs = components['schemas']['CancelInvitationArgs'];
export type CloudBackupId = components['schemas']['CloudBackupId'];
export type CloudBackupResponse = components['schemas']['CloudBackupResponse'];
export type ConfigurePeriodicBackupArgs = components['schemas']['ConfigurePeriodicBackupArgs'];
export type CreateInvitationArgs = components['schemas']['CreateInvitationArgs'];
export type CreateProjectArgs = components['schemas']['CreateProjectArgs'];
export type CreateProjectResponse = components['schemas']['CreateProjectResponse'];
export type CreateSubscriptionArgs = components['schemas']['CreateSubscriptionArgs'];
export type CreateTeamArgs = components['schemas']['CreateTeamArgs'];
export type DeploymentId = components['schemas']['DeploymentId'];
export type DeploymentResponse = components['schemas']['DeploymentResponse'];
export type DeploymentType = components['schemas']['DeploymentType'];
export type DeviceName = components['schemas']['DeviceName'];
export type DiscordAccount = components['schemas']['DiscordAccount'];
export type DiscordAccountDetails = components['schemas']['DiscordAccountDetails'];
export type DiscordAccountsResponse = components['schemas']['DiscordAccountsResponse'];
export type DiscordId = components['schemas']['DiscordId'];
export type DiscordLoginUrlResponse = components['schemas']['DiscordLoginUrlResponse'];
export type DiscountedPlanResponse = components['schemas']['DiscountedPlanResponse'];
export type GetOptInsResponse = components['schemas']['GetOptInsResponse'];
export type InstanceAuthForDashboardInteractionsResponse = components['schemas']['InstanceAuthForDashboardInteractionsResponse'];
export type InstanceName = components['schemas']['InstanceName'];
export type InvitationResponse = components['schemas']['InvitationResponse'];
export type InvoiceResponse = components['schemas']['InvoiceResponse'];
export type InvoicesResponse = components['schemas']['InvoicesResponse'];
export type ListVanityDomainsResponse = components['schemas']['ListVanityDomainsResponse'];
export type MemberDataResponse = components['schemas']['MemberDataResponse'];
export type MemberEmailId = components['schemas']['MemberEmailId'];
export type MemberEmailResponse = components['schemas']['MemberEmailResponse'];
export type MemberId = components['schemas']['MemberId'];
export type MemberResponse = components['schemas']['MemberResponse'];
export type OptIn = components['schemas']['OptIn'];
export type OptInToAccept = components['schemas']['OptInToAccept'];
export type OrbSubscriptionResponse = components['schemas']['OrbSubscriptionResponse'];
export type PartitionId = components['schemas']['PartitionId'];
export type PaymentMethodResponse = components['schemas']['PaymentMethodResponse'];
export type PeriodicBackupConfig = components['schemas']['PeriodicBackupConfig'];
export type PlanResponse = components['schemas']['PlanResponse'];
export type PlansResponse = components['schemas']['PlansResponse'];
export type PreviewDeploymentIdentifier = components['schemas']['PreviewDeploymentIdentifier'];
export type ProfileEmailArgs = components['schemas']['ProfileEmailArgs'];
export type ProjectDetails = components['schemas']['ProjectDetails'];
export type ProjectId = components['schemas']['ProjectId'];
export type ProjectMemberRoleResponse = components['schemas']['ProjectMemberRoleResponse'];
export type ProjectName = components['schemas']['ProjectName'];
export type ProjectRole = components['schemas']['ProjectRole'];
export type ProjectRoleUpdateArg = components['schemas']['ProjectRoleUpdateArg'];
export type ProjectSlug = components['schemas']['ProjectSlug'];
export type ProposedTeamName = components['schemas']['ProposedTeamName'];
export type ProvisionDeploymentDashboardArgs = components['schemas']['ProvisionDeploymentDashboardArgs'];
export type ProvisionDeploymentDashboardResponse = components['schemas']['ProvisionDeploymentDashboardResponse'];
export type RemoveMemberArgs = components['schemas']['RemoveMemberArgs'];
export type RenameAccessTokenArgs = components['schemas']['RenameAccessTokenArgs'];
export type RequestDestination = components['schemas']['RequestDestination'];
export type RestoreFromCloudBackupArgs = components['schemas']['RestoreFromCloudBackupArgs'];
export type Role = components['schemas']['Role'];
export type SerializedAccessToken = components['schemas']['SerializedAccessToken'];
export type SetupIntentResponse = components['schemas']['SetupIntentResponse'];
export type Team = components['schemas']['Team'];
export type TeamAccessTokenResponse = components['schemas']['TeamAccessTokenResponse'];
export type TeamEntitlementsResponse = components['schemas']['TeamEntitlementsResponse'];
export type TeamId = components['schemas']['TeamId'];
export type TeamMemberResponse = components['schemas']['TeamMemberResponse'];
export type TeamName = components['schemas']['TeamName'];
export type TeamSlug = components['schemas']['TeamSlug'];
export type TeamUsageStateResponse = components['schemas']['TeamUsageStateResponse'];
export type TransferProjectArgs = components['schemas']['TransferProjectArgs'];
export type UnlinkDiscordAccountRequest = components['schemas']['UnlinkDiscordAccountRequest'];
export type UpdateBillingAddressArgs = components['schemas']['UpdateBillingAddressArgs'];
export type UpdateBillingContactArgs = components['schemas']['UpdateBillingContactArgs'];
export type UpdateMemberRoleArgs = components['schemas']['UpdateMemberRoleArgs'];
export type UpdatePaymentMethodArgs = components['schemas']['UpdatePaymentMethodArgs'];
export type UpdateProfileNameArgs = components['schemas']['UpdateProfileNameArgs'];
export type UpdateProjectArgs = components['schemas']['UpdateProjectArgs'];
export type UpdateProjectRolesArgs = components['schemas']['UpdateProjectRolesArgs'];
export type UpdateTeamArgs = components['schemas']['UpdateTeamArgs'];
export type UsageState = components['schemas']['UsageState'];
export type Value = components['schemas']['Value'];
export type VanityDomainRequestArgs = components['schemas']['VanityDomainRequestArgs'];
export type VanityDomainResponse = components['schemas']['VanityDomainResponse'];
export type $defs = Record<string, never>;
export interface operations {
    get_cloud_backup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cloud_backup_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CloudBackupResponse"];
                };
            };
        };
    };
    cancel_cloud_backup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cloud_backup_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    delete_cloud_backup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cloud_backup_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_project_and_provision_deployment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProjectArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateProjectResponse"];
                };
            };
        };
    };
    delete_account: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dashboard_delete_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    configure_periodic_backup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deployment_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfigurePeriodicBackupArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null | components["schemas"]["PeriodicBackupConfig"];
                };
            };
        };
    };
    disable_periodic_backup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deployment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_periodic_backup_config: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deployment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null | components["schemas"]["PeriodicBackupConfig"];
                };
            };
        };
    };
    request_cloud_backup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deployment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CloudBackupResponse"];
                };
            };
        };
    };
    restore_from_cloud_backup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deployment_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RestoreFromCloudBackupArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_discord_accounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiscordAccountsResponse"];
                };
            };
        };
    };
    authorize_discord_account: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthorizeDiscordAccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_discord_login_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiscordLoginUrlResponse"];
                };
            };
        };
    };
    unlink_discord_account: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UnlinkDiscordAccountRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_deployment_access_tokens: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deployment_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamAccessTokenResponse"][];
                };
            };
        };
    };
    get_deployment_auth_dashboard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deployment_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InstanceAuthForDashboardInteractionsResponse"];
                };
            };
        };
    };
    create_vanity_domain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deployment_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VanityDomainRequestArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_vanity_domain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deployment_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VanityDomainRequestArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_vanity_domains_for_instance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deployment_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListVanityDomainsResponse"];
                };
            };
        };
    };
    accept_invitation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
        };
    };
    get_member_data: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberDataResponse"];
                };
            };
        };
    };
    dashboard_get_opt_ins: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOptInsResponse"];
                };
            };
        };
    };
    dashboard_accept_opt_ins: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OptIn"][];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberResponse"];
                };
            };
        };
    };
    create_profile_email: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileEmailArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_profile_email: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileEmailArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_profile_emails: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberEmailResponse"][];
                };
            };
        };
    };
    resend_verification_email: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileEmailArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_primary_profile_email: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileEmailArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verify_profile_email: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectDetails"];
                };
            };
        };
    };
    update_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProjectArgs"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_project_access_tokens: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamAccessTokenResponse"][];
                };
            };
        };
    };
    list_deployments_for_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeploymentResponse"][];
                };
            };
        };
    };
    provision_deployment_dashboard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProvisionDeploymentDashboardArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProvisionDeploymentDashboardResponse"];
                };
            };
        };
    };
    transfer_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransferProjectArgs"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    rename_access_token: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RenameAccessTokenArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_teams_for_member: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"][];
                };
            };
        };
    };
    create_team: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTeamArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
        };
    };
    delete_team_access_token: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActionOnAccessTokenArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_team: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTeamArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_team_access_tokens: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamAccessTokenResponse"][];
                };
            };
        };
    };
    cancel_orb_subscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_setup_intent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetupIntentResponse"];
                };
            };
        };
    };
    create_subscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSubscriptionArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_team: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_deployment_by_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["schemas"]["TeamId"];
                deployment_id: components["schemas"]["DeploymentId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeploymentResponse"];
                };
            };
        };
    };
    get_audit_log_events: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuditLogResponse"];
                };
            };
        };
    };
    get_discounted_plan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
                plan_id: string;
                promo_code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiscountedPlanResponse"];
                };
            };
        };
    };
    get_team_entitlements: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamEntitlementsResponse"];
                };
            };
        };
    };
    get_orb_subscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null | components["schemas"]["OrbSubscriptionResponse"];
                };
            };
        };
    };
    get_project_roles_for_team: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMemberRoleResponse"][];
                };
            };
        };
    };
    pending_invitations_for_team: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvitationResponse"][];
                };
            };
        };
    };
    create_invitation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInvitationArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cancel_invitation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CancelInvitationArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_active_plans: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlansResponse"];
                };
            };
        };
    };
    list_cloud_backups: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CloudBackupResponse"][];
                };
            };
        };
    };
    list_invoices: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoicesResponse"];
                };
            };
        };
    };
    get_members_for_team: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamMemberResponse"][];
                };
            };
        };
    };
    get_projects_for_team: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectDetails"][];
                };
            };
        };
    };
    remove_member_from_team: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RemoveMemberArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    unpause_deployments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    unschedule_cancel_orb_subscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_billing_address: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBillingAddressArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_billing_contact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBillingContactArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_member_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMemberRoleArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_payment_method: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePaymentMethodArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_project_roles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProjectRolesArgs"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_team_usage_state: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamUsageStateResponse"];
                };
            };
        };
    };
    update_profile_name: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileNameArgs"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
